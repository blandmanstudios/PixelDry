ffmpeg -re -i 'vid0003.mp4' -i meizong-salt-mines.mp3 -map 0:v -map 1:a -c:v libx264 -f flv rtmp://$STREAM_URL/$STREAM_KEY

ffmpeg -f concat -safe 0 -i mylist.txt -c copy output.mp

# 4 clips with a song to a 1:20 video
ffmpeg -f concat -safe 0 -i mylist.txt -i meizong-salt-mines.mp3 -map 0:v -map 1:a -c:v libx264 -f flv -shortest -c copy output.mp4

# streamed my 4 files as specified in the text file to youtube with a song!
ffmpeg -re -f concat -safe 0 -i mylist.txt -i meizong-salt-mines.mp3 -map 0:v -map 1:a -c:v libx264 -f flv -shortest -c copy rtmp://$STREAM_URL/$STREAM_KEY


# i can alternate kicking off the command above offset on different terminals
# and youtube will fallback to the other as soon as one finishes

# i can even force it onto the one i want my streaming that one then killing
# the other and youtube will be like "oh this is the only one, guess i gotta
# go with that


# because of the latency, i can actually wait for the process to stop, then
# kick off the next one and the stream is none the wiser!
# i can just have a loop that reads the file live-ish (with -re) then when it
# finishes it asks, what are the next (one song duration's worth) 50 clips
# and then it streams those, as long as that is a very quick calc, we have
# a near live continuous 24/7 stream
# okay, i do have to be quick with the restart when youtube is in low-latency
# mode, but I'll switch to normal latency and see if that gives me more time
# to do the dj swap
# normal latency will get me better video quality too

# after a little testing, you gotta be quick on the gun to start the next one
# without the stream hanging
# human reaction time isnt even good enough :(

# i'll have to script it to alternate two instances of ffmpeg once on is almost
# complete (5 seconds togo)

# if you launch when theres 20 seconds to go it buffers and hangs and you missed
# a clip

# if you launch with 10 seconds left on the other, it cuts over so clean!
# if you launch with 5 seconds left on the other, it might have cut over clean
#   but it might have gotten confused and skipped the black frame
# if you launch with 5 seconds left on the ohter, stream hung that time, yeah
#   5 is nogo
# if you launch with 15 seconds left on the other, 15 is rough and it misses
#   some of your content
# lets aim for starting a new stream when one is 10 seconds away from playing
#   out its max time
# darn, 10 seconds has some cutover too

# am i supposed to be using the stream and the backup, does that make switching
# smoother?


# new idea, what if i ingest the file list into ffmpeg but swap the files out
# while its running to be truely low latency and people can render their stuff
# and see it show up in the livestream

# solved it!
# the answer is to just put the stream on loop and switch out the files when it
# is not looking at them
# i swapped vid0001.mp4 while it was showing the thing after that on the stream
# and on the next loop it worked with the new image
# also...the music doesnt reset when it loops back to the first clip
# i'll keep listening to see what happens when the long ends but i think
# i found the golden command its going to get pasted below
# oh darn, never mind the stream quit when the song ended lol the song doesnt
# loop
# either way the command is great and super helpful
ffmpeg -stream_loop -1 -re -f concat -safe 0 -i mylist.txt -i meizong-salt-mines.mp3 -map 0:v -map 1:a -c:v libx264 -f flv -shortest -c copy rtmp://$STREAM_URL/$STREAM_KEY


# what if i try it without -shortest
# yeah that didnt do much good, the ffmpeg instance kept going but the stream
# stopped, lame

# next time i'm going to try -x264-params keyint=90:scenecut=0 to see if that
# makes the youtube error/warning about keyframes being too far apart (5+
# seconds instead of < 4)
ffmpeg -stream_loop -1 -re -f concat -safe 0 -i mylist.txt -i meizong-salt-mines.mp3 -map 0:v -map 1:a -c:v libx264 -x264-params keyint=90:scenecut=0 -shortest -f flv -c copy rtmp://$STREAM_URL/$STREAM_KEY
# still shows errors (keryframe per 8 seconds) with 90
# try keyint=30... it says its a suggestion cuz mine is 4.8 seconds
ffmpeg -stream_loop -1 -re -f concat -safe 0 -i mylist.txt -i meizong-salt-mines.mp3 -map 0:v -map 1:a -c:v libx264 -x264-params keyint=30:scenecut=0 -shortest -f flv -c copy rtmp://$STREAM_URL/$STREAM_KEY
# lets try keyint=10
ffmpeg -stream_loop -1 -re -f concat -safe 0 -i mylist.txt -i meizong-salt-mines.mp3 -map 0:v -map 1:a -c:v libx264 -x264-params keyint=10:scenecut=0 -shortest -f flv -c copy rtmp://$STREAM_URL/$STREAM_KEY
# keyframe erorr is back to 8seconds, not sure what i'm doing to cause it
# if if this is the fix



# lets try looping both! yes it worked! i have independently looping music and
# images that will go on forever
ffmpeg -re -stream_loop -1 -f concat -safe 0 -i mylist.txt -stream_loop -1 -i meizong-salt-mines.mp3 -map 0:v -map 1:a -c:v libx264 -x264-params keyint=10:scenecut=0 -shortest -f flv -c copy rtmp://$STREAM_URL/$STREAM_KEY

# still working on keyframes tho, qscale and g? cuz
# https://stackoverflow.com/questions/46445889/cannot-change-video-keyframe-interval-to-be-1-using-ffmpeg
ffmpeg -re -stream_loop -1 -f concat -safe 0 -i mylist.txt -stream_loop -1 -i meizong-salt-mines.mp3 -map 0:v -map 1:a -c:v libx264 -x264-params keyint=10:scenecut=0 -shortest -qscale 0 -g 1 -f flv -c copy rtmp://$STREAM_URL/$STREAM_KEY
# yeah that didnt fix it... still get 8 second warning


# dynamic songlist works! i havent tried switching them live while its running
# but i can read the songs from a file which is pretty cool
ffmpeg -re -stream_loop -1 -f concat -safe 0 -i mylist.txt -stream_loop -1 -f concat -safe 0 -i mysonglist.txt -map 0:v -map 1:a -c:v libx264 -x264-params keyint=10:scenecut=0 -shortest -qscale 0 -g 1 -f flv -c copy rtmp://$STREAM_URL/$STREAM_KEY
